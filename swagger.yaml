openapi: 3.0.0

info:
  title: Learn express and swagger
  description: Learn all about express and api documentation using swagger.
  version: 1.0.1
  contact:
    email: testemail@email.com
    url: "http://localhost:4000"

servers:
  - url: "{protocol}://localhost:4000/api/{version}"
    description: For localhost
    variables:
      version:
        enum:
          - v1
          - v2
        default: v1
      protocol:
        enum:
          - http
          - https
        default: http

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer

paths:
  /lco:
    get:
      tags:
        - String
      summary: returns a greet message from lco
      responses:
        200:
          description: All good and success
          content:
            application/json:
              schema:
                type: string
                example: "my string"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: string
                example: "my string"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "my string"
  /lcoobject:
    get:
      tags:
        - Object
      summary: returns a object of lco course
      responses:
        200:
          description: All good and got object
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  price:
                    type: number
  /lcoarray:
    get:
      tags:
        - Array
      summary: returns a object of lco course
      responses:
        200:
          description: All good and got array
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    price:
                      type: number
  /courses/{courseId}:
    get:
      tags:
        - Array
      summary: returns a course based on an ID
      parameters:
        - name: courseId
          in: path
          required: true
          default: 11
          schema:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              price:
                type: number
      responses:
        200:
          description: All good and got array
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  price:
                    type: number
  /courses:
    get:
      tags:
        - String
      summary: run data in query
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
            enum: [delhi, london, surat]
        - name: device
          in: query
          required: true
          schema:
            type: string
            enum: [ios, android, web]
      responses:
        200:
          description: All good and got object
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    type: string
                  device:
                    type: string
    post:
      tags:
        - String
      summary: add given course to exisiting course array
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                price:
                  type: number
      responses:
        200:
          description: All good and got array
          content:
            application/json:
              schema:
                type: boolean
  /coursesupload:
    post:
      tags:
        - String
      summary: Upoading course images
      parameters:
        - in: header
          name: auth
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: All good and got array
          content:
            application/json:
              schema:
                type: boolean
